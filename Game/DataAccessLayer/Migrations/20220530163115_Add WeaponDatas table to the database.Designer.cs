// <auto-generated />
using DataAccessLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20220530163115_Add WeaponDatas table to the database")]
    partial class AddWeaponDatastabletothedatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccessLayer.Models.ArmorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AirResistance")
                        .HasColumnType("float");

                    b.Property<int>("ArmorCommonDataId")
                        .HasColumnType("int");

                    b.Property<int>("ArmorEquipSlot")
                        .HasColumnType("int");

                    b.Property<int>("ArmorRarity")
                        .HasColumnType("int");

                    b.Property<int>("ArmorType")
                        .HasColumnType("int");

                    b.Property<double>("AssemblyArmor")
                        .HasColumnType("float");

                    b.Property<double>("BluntResistance")
                        .HasColumnType("float");

                    b.Property<double>("EarthResistance")
                        .HasColumnType("float");

                    b.Property<double>("FireResistance")
                        .HasColumnType("float");

                    b.Property<int>("FirstProtectionArea")
                        .HasColumnType("int");

                    b.Property<double>("LuxResistance")
                        .HasColumnType("float");

                    b.Property<double>("PiercingResistance")
                        .HasColumnType("float");

                    b.Property<int>("SecondProtectionArea")
                        .HasColumnType("int");

                    b.Property<double>("SlashingResistance")
                        .HasColumnType("float");

                    b.Property<int>("ThirdProtectionArea")
                        .HasColumnType("int");

                    b.Property<double>("VoidResistance")
                        .HasColumnType("float");

                    b.Property<double>("WaterResistance")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArmorCommonDataId");

                    b.ToTable("ArmorDatas");
                });

            modelBuilder.Entity("DataAccessLayer.Models.CharacterData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArmsId")
                        .HasColumnType("int");

                    b.Property<int>("ChestId")
                        .HasColumnType("int");

                    b.Property<int>("FeetId")
                        .HasColumnType("int");

                    b.Property<int>("HandsId")
                        .HasColumnType("int");

                    b.Property<int>("HeadId")
                        .HasColumnType("int");

                    b.Property<double>("Health")
                        .HasColumnType("float");

                    b.Property<int>("LegsId")
                        .HasColumnType("int");

                    b.Property<int>("MainHandId")
                        .HasColumnType("int");

                    b.Property<double>("Mana")
                        .HasColumnType("float");

                    b.Property<double>("ManaRegenerationRate")
                        .HasColumnType("float");

                    b.Property<int>("OffHandId")
                        .HasColumnType("int");

                    b.Property<int>("ShouldersId")
                        .HasColumnType("int");

                    b.Property<double>("Stamina")
                        .HasColumnType("float");

                    b.Property<double>("StaminaRegenerationRate")
                        .HasColumnType("float");

                    b.Property<int>("WaistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmsId");

                    b.HasIndex("ChestId");

                    b.HasIndex("FeetId");

                    b.HasIndex("HandsId");

                    b.HasIndex("HeadId");

                    b.HasIndex("LegsId");

                    b.HasIndex("MainHandId");

                    b.HasIndex("OffHandId");

                    b.HasIndex("ShouldersId");

                    b.HasIndex("WaistId");

                    b.ToTable("CharacterDatas");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasCheckConstraint("CK_Users_Age", "Age > 13");

                    b.HasCheckConstraint("CK_Users_Email", "Email like '%@%'");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserCharacter", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("UserCharacters");
                });

            modelBuilder.Entity("DataAccessLayer.Models.WeaponData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AssemblyDamage")
                        .HasColumnType("float");

                    b.Property<double>("CritMult")
                        .HasColumnType("float");

                    b.Property<double>("CritRate")
                        .HasColumnType("float");

                    b.Property<int>("MagicalDamageType")
                        .HasColumnType("int");

                    b.Property<int>("MainDamageType")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalDamageType")
                        .HasColumnType("int");

                    b.Property<int>("WeaponCommonDataId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponRarity")
                        .HasColumnType("int");

                    b.Property<int>("WeaponType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeaponCommonDataId");

                    b.ToTable("WeaponDatas");
                });

            modelBuilder.Entity("DataAccessLayer.Models.ArmorData", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Item", "ArmorCommonData")
                        .WithMany()
                        .HasForeignKey("ArmorCommonDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorCommonData");
                });

            modelBuilder.Entity("DataAccessLayer.Models.CharacterData", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Item", "Arms")
                        .WithMany()
                        .HasForeignKey("ArmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Item", "Chest")
                        .WithMany()
                        .HasForeignKey("ChestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Item", "Feet")
                        .WithMany()
                        .HasForeignKey("FeetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Item", "Hands")
                        .WithMany()
                        .HasForeignKey("HandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Item", "Head")
                        .WithMany()
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Item", "Legs")
                        .WithMany()
                        .HasForeignKey("LegsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Item", "MainHand")
                        .WithMany()
                        .HasForeignKey("MainHandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Item", "OffHand")
                        .WithMany()
                        .HasForeignKey("OffHandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Item", "Shoulders")
                        .WithMany()
                        .HasForeignKey("ShouldersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Item", "Waist")
                        .WithMany()
                        .HasForeignKey("WaistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arms");

                    b.Navigation("Chest");

                    b.Navigation("Feet");

                    b.Navigation("Hands");

                    b.Navigation("Head");

                    b.Navigation("Legs");

                    b.Navigation("MainHand");

                    b.Navigation("OffHand");

                    b.Navigation("Shoulders");

                    b.Navigation("Waist");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserCharacter", b =>
                {
                    b.HasOne("DataAccessLayer.Models.CharacterData", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.WeaponData", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Item", "WeaponCommonData")
                        .WithMany()
                        .HasForeignKey("WeaponCommonDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponCommonData");
                });
#pragma warning restore 612, 618
        }
    }
}
